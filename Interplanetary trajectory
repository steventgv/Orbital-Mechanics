# Algorithm 8.2 Interplanetary trajectory
import numpy as np
def planet_position(planet_id,year,month,day,hour,minute,second,mu):
    j0=367*year-int(7*(year+int((month+9)/12))/4)+int(275*month/9)+day+1721013.5
    ut=hour+minute/60+second/3600
    jd=j0+ut/24
    t0=(jd-2451545)/36525
    def zeroTo360(x):
        if x>=360:
                x=x-int(x/360)*360
        elif x<0:
                x=x-(int(x/360)-1)*360
        return x
    J2000_elements=np.array([[0.38709893, 0.20563069, 7.00487, 48.33167, 77.45645, 252.25084],# Mercury
                           [0.72333199, 0.00677323, 3.39471, 76.68069, 131.53298, 181.97973], # Venus
                           [1.00000011, 0.01671022, 0.00005, -11.26064, 102.94719, 100.46435],# Earth
                           [1.52366231, 0.09341233, 1.85061, 49.57854, 336.04084, 355.45332], # Mars
                           [5.20336301, 0.04839266, 1.30530, 100.55615, 14.75385, 34.40438],  # Jupiter
                           [9.53707032, 0.05415060, 2.48446, 113.71504, 92.43194, 49.94432],  # Saturn
                           [19.19126393, 0.04716771, 0.76986, 74.22988, 170.96424, 313.23218],# Uranus
                           [30.06896348, 0.00858587, 1.76917, 131.72169, 44.97135, 304.88003]])# Neptune

    cent_rates=np.array([[0.00000066, 0.00002527, -23.51, -446.30, 573.57, 538101628.29], # Mercury
                        [0.00000092, -0.00004938, -2.86, -996.89, -108.80, 210664136.06], # Venus
                        [-0.00000005, -0.00003804, -46.94, -18228.25, 1198.28, 129597740.63], # Earth
                        [-0.00007221, 0.00011902,-25.47, -1020.19, 1560.78, 68905103.78], # Mars
                        [0.00060737, -0.00012880, -4.15, 1217.17, 839.93, 10925078.35], # Jupiter
                        [-0.00301530, 0.00036762, 6.11, -1591.05, -1948.89, 4401052.95], # Saturn
                        [0.00152025, -0.00019150, -2.09, -1681.4, 1312.56, 1542547.79], # Uranus
                        [-0.00125196, 0.00002514, -3.64, -151.25, -844.43, 786449.21]])# Neptune

    J2000_coe=J2000_elements[planet_id-1,:]
    rates=cent_rates[planet_id-1,:]
    au=149597871
    J2000_coe[0]=J2000_coe[0]*au
    rates[0]=rates[0]*au
    rates[2:6]=rates[2:6]/3600

    elements=J2000_coe+rates*t0
    a=elements[0]
    e=elements[1]
    i=elements[2]
    RA=zeroTo360(elements[3])
    w_hat=zeroTo360(elements[4])
    L=zeroTo360(elements[5])
    w=zeroTo360(w_hat-RA)
    M=zeroTo360(L-w_hat)

    def kepler_E(e,M):
        error=1.e-8
        if M<np.pi:
            E=M+e/2
        else:
            E=M-e/2
        ratio=1
        while np.abs(ratio)>error:
            ratio=(E-e*np.sin(E)-M)/(1-e*np.cos(M))
            E=E-ratio
        return E
    E=np.degrees(kepler_E(e,np.radians(M)))
    TA=zeroTo360(np.degrees(2*np.arctan(np.sqrt((1+e)/(1-e))*np.tan(np.radians(E)/2))))
    return a,e,i,RA,w,TA,jd
    
def OB_to_SV(a,e,i,RA,w,TA,mu):
    h=np.sqrt(mu*a*(1-e**2))
    i=np.radians(i)
    RA=np.radians(RA)
    w=np.radians(w)
    theta=np.radians(TA)
    
    rp=(h**2/mu)*(1/(1+e*np.cos(theta)))*(np.cos(theta)*np.array([1,0,0])+np.sin(theta)*np.array([0,1,0]))
    vp=(mu/h)*(-np.sin(theta)*np.array([1,0,0])+(e+np.cos(theta))*np.array([0,1,0]))

    R3_w=np.array([[np.cos(w),np.sin(w),0],
                  [-np.sin(w),np.cos(w),0],
                  [0,0,1]])
    R1_i=np.array([[1,0,0],
                  [0,np.cos(i),np.sin(i)],
                  [0,-np.sin(i),np.cos(i)]])
    R3_RA=np.array([[np.cos(RA),np.sin(RA),0],
                  [-np.sin(RA),np.cos(RA),0],
                  [0,0,1]])

    Q_px=np.matmul(R3_w,R1_i)
    Q_px=np.matmul(Q_px,R3_RA)
    Q=Q_px.transpose()
    r=np.matmul(Q,rp)
    v=np.matmul(Q,vp)
    return r,v

def lambert(R1,R2,tof,mu):
    r1=np.linalg.norm(R1)
    r2=np.linalg.norm(R2)
    c12=np.cross(R1,R2)
    theta=np.arccos(np.dot(R1,R2)/(r1*r2))
    if c12[2]<=0:
        theta=2*np.pi-theta
    else:
        theta=theta
    A=np.sin(theta)*np.sqrt(r1*r2/(1-np.cos(theta)))    

    z=0

    def S(z):
        if z>0:
             s=(np.sqrt(z)-np.sin(np.sqrt(z)))/np.sqrt(z)**3
        elif z<0:
             s=(np.sinh(np.sqrt(-z))-np.sqrt(-z))/np.sqrt(-z)**3
        else:
            s=1/6
        return s

    def C(z):
        if z>0:
             c=(1-np.cos(np.sqrt(z)))/z
        elif z<0:
             c=(np.cosh(np.sqrt(-z))-1)/(-z)
        else:
            c=1/2
        return c

    def y(z):
        return r1+r2+A*(z*S(z)-1)/np.sqrt(C(z))

    def F(z,t):
        return ((y(z)/C(z))**1.5)*S(z)+A*np.sqrt(y(z))-np.sqrt(mu)*tof

    def dFdz(z):
        if z==0:
            return np.sqrt(2)/40*y(0)**1.5+A/8*np.sqrt(y(0))+A*np.sqrt(1/2/y(0))
        else:
            return (y(z)/C(z))**1.5*(1/2/z*(C(z)-3*S(z)/2/C(z))+3*S(z)**2/4/C(z))+A/8*(3*S(z)/C(z)*np.sqrt(y(z))+A*np.sqrt(C(z)/y(z)))

    while F(z,tof)<0:
        z=z+0.01

    tol=1.e-8
    nmax=5000
    ratio=1
    n=0
    while (np.abs(ratio)>tol) & (n<=nmax):
        n=n+1
        ratio=F(z,tof)/dFdz(z)
        z=z-ratio

    f=1-y(z)/r1
    g=A*np.sqrt(y(z)/mu)
    gdot=1-y(z)/r2
    V1=1/g*(R2-f*R1)
    V2=1/g*(gdot*R2-R1)
    return V1,V2

def SV_to_OB(R1,V1,mu):
    r_vector=R1
    v_vector=V1

    r=np.linalg.norm(r_vector)
    v=np.sqrt(np.dot(v_vector,v_vector)) #和 v=np.sqrt(np.dot(v_vector,v_vector))一樣
    Vr=(np.dot(r_vector,v_vector)/r)
    h_vector=np.cross(r_vector,v_vector)
    h=np.linalg.norm(h_vector)
    hz=h_vector[2]
    i=np.degrees(np.arccos(hz/h))
    K_vector=np.array([0,0,1])
    N_vector=np.cross(K_vector,h_vector)
    N=np.linalg.norm(N_vector)
    Nx=N_vector[0]
    Ny=N_vector[1]

    if Ny>0:
        RA=np.degrees(np.arccos(Nx/N))
    else:
        RA=360-np.degrees(np.arccos(Nx/N))

    e_vector=((v**2-mu/r)*r_vector-r*Vr*v_vector)/mu
    e=np.sqrt(np.dot(e_vector,e_vector))

    ez=e_vector[2]

    if ez>0:
        w=np.degrees(np.arccos(np.dot(N_vector,e_vector)/(N*e)))
    else:
        w=360-np.degrees(np.arccos(np.dot(N_vector,e_vector)/(N*e)))

    if Vr>0:
        theta=np.degrees(np.arccos(np.dot(e_vector,r_vector)/(e*r)))
    else:
        theta=360-np.degrees(np.arccos(np.dot(e_vector,r_vector)/(e*r)))
    rp=(h**2)/(mu*(1+e*np.cos(np.radians(0))))
    ra=(h**2)/(mu*(1+e*np.cos(np.radians(180))))
    a=(ra+rp)/2
    T=(2*np.pi*a**1.5)/(3600*np.sqrt(mu))
    return a,e,i,RA,w,theta

def Plot(a1,e1,a2,e2,a,e,TAd,TAa,mu):
    import matplotlib.pyplot as plt
    ta1=np.linspace(0,2*np.pi,3600)
    h1=np.sqrt(a1*mu*(1-e1**2))
    r1=(h1**2)/(mu*(1+e1*np.cos(ta1)))
    x1=r1*np.cos(ta1)
    y1=r1*np.sin(ta1) 
    ta2=np.linspace(0,2*np.pi,3600)
    h2=np.sqrt(a2*mu*(1-e2**2))
    r2=(h2**2)/(mu*(1+e2*np.cos(ta2)))
    x2=r2*np.cos(ta2)
    y2=r2*np.sin(ta2) 
    if TAa>TAd:
        ta=np.linspace(np.radians(TAd),np.radians(TAa),3600)
    else:
        ta=np.linspace(-np.radians(TAd),-np.radians(TAa),3600)  
    h=np.sqrt(a*mu*(1-e**2))
    r=(h**2)/(mu*(1+e*np.cos(ta)))
    x=r*np.cos(ta)
    y=r*np.sin(ta)    
    plt.style.use('dark_background')
    plt.axis('equal')
    plt.plot(x,y,"c.")
    plt.plot(x1,y1,"b.")
    plt.plot(x2,y2,"r.")
    plt.show()

Planet={1:"Mercury",2:"Venus",3:"Earth",4:"Mars",
        5:"Jupiter",6:"Saturn",7:"Uranus",8:"Neptune"}
mu=1.327124e11

depart=np.array([1996,11,7,0,0,0])
depart_OB=planet_position(3,depart[0],depart[1],depart[2],depart[3],depart[4],depart[5],mu)
a1=depart_OB[0]
e1=depart_OB[1]
jd1=depart_OB[6]
depart_SV=OB_to_SV(depart_OB[0],depart_OB[1],depart_OB[2],depart_OB[3],depart_OB[4],depart_OB[5],mu)
Rp1=depart_SV[0]
Vp1=depart_SV[1]

arrive=np.array([1997,9,12,0,0,0])
arrive_OB=planet_position(4,arrive[0],arrive[1],arrive[2],arrive[3],arrive[4],arrive[5],mu)
a2=arrive_OB[0]
e2=arrive_OB[1]
jd2=arrive_OB[6]
arrive_SV=OB_to_SV(arrive_OB[0],arrive_OB[1],arrive_OB[2],arrive_OB[3],arrive_OB[4],arrive_OB[5],mu)
Rp2=arrive_SV[0]
Vp2=arrive_SV[1]

tof=(jd2-jd1)*24*3600
R1=Rp1
R2=Rp2
[V1,V2]=lambert(Rp1,Rp2,tof,mu)
Vinf1=V1-Vp1
Vinf2=V2-Vp2

SV1=SV_to_OB(R1,V1,mu)
SV2=SV_to_OB(R2,V2,mu)
a=SV1[0]
e=SV1[1]
h=np.sqrt(a*mu*(1-e**2))
i=SV1[2]
RA=SV1[3]
w=SV1[4]
TAd=SV1[5]
TAa=SV2[5]
Plot(a1,e1,a2,e2,a,e,TAd,TAa,mu)

print("Planet:",Planet[3])
print("Date:",depart,"\n")
print("Planet position vector: ",Rp1)
print("Magnitude:",np.linalg.norm(Rp1),"\n")
print("Planet Velocity vector:",Vp1)
print("Magnitude:",np.linalg.norm(Vp1),"\n")
print("Spacecraft Velocity:",V1)
print("Magnitude:",np.linalg.norm(V1),"\n")
print("V-infnity at departure:",Vinf1)
print("Magnitude:",np.linalg.norm(Vinf1))
print("\n")
print("Time of flight:",jd2-jd1,"days")
print("\n")
print("Planet:",Planet[4])
print("Date:",arrive,"\n")
print("Planet position vector: ",Rp2)
print("Magnitude:",np.linalg.norm(Rp2),"\n")
print("Planet Velocity vector:",Vp2)
print("Magnitude:",np.linalg.norm(Vp2),"\n")
print("Spacecraft Velocity:",V2)
print("Magnitude:",np.linalg.norm(V2),"\n")
print("V-infinity at arrival:",Vinf2)
print("Magnitude:",np.linalg.norm(Vinf2),)
print("\n")

print("Orbital elements of flight trajectory:")
print("h=",h,"km^2/s")
print("a=",a,'km')
print("e=",e,)
print("i=",i,"deg")
print("RA=",RA,"deg")
print("w=",w,"deg")
print("TA departure=",TAd,"deg")
print("TA arrival=",TAa,"deg")
print("Period=",2*np.pi*a**1.5/(np.sqrt(mu)*24*3600),"days")
