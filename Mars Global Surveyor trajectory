import numpy as np
import astropy.units as u
from astropy import time
from poliastro import iod
from poliastro.bodies import Sun, Earth, Mars
from poliastro.twobody import Orbit
from poliastro.twobody.propagation import propagate
from poliastro.util import time_range
from astropy.coordinates import CartesianRepresentation
from poliastro.frames import Planes, get_frame

from astropy.coordinates import solar_system_ephemeris, get_body_barycentric_posvel
solar_system_ephemeris.set("jpl")

# Initial data
N = 50
date_launch = time.Time("1996-11-07 00:00", scale='tdb')
date_arrival = time.Time("1997-09-12 00:00", scale='tdb')
tof = date_arrival - date_launch

ss0 = Orbit.from_body_ephem(Earth, date_launch)
ss1 = Orbit.from_body_ephem(Mars, epoch=date_arrival)

times_vector = time_range(date_launch, end=date_arrival, periods=N)
rr_earth, vv_earth = get_body_barycentric_posvel("earth", times_vector)
rr_mars, vv_mars = get_body_barycentric_posvel("mars", times_vector)
# Compute the transfer orbit!
r0 = rr_earth[0].xyz
rf = rr_mars[-1].xyz

(va, vb), = iod.lambert(Sun.k, r0, rf, tof)

ss0_trans = Orbit.from_vectors(Sun, r0, va, date_launch)
ssf_trans = Orbit.from_vectors(Sun, rf, vb, date_arrival)
from plotly.offline import init_notebook_mode
init_notebook_mode(connected=True)

def change_plane(ss_orig, plane):
    """Changes the plane of the Orbit."""
    ss_orig_rv = ss_orig.frame.realize_frame(ss_orig.represent_as(CartesianRepresentation))

    dest_frame = get_frame(ss_orig.attractor, plane, obstime=ss_orig.epoch)
    ss_dest_rv = ss_orig_rv.transform_to(dest_frame)
    ss_dest_rv.representation_type = CartesianRepresentation
    ss_dest = Orbit.from_coords(ss_orig.attractor, ss_dest_rv, plane=plane)
    return ss_dest

print("Use Earth eliptic\n")
print("h=",np.sqrt(ss0_trans.a*Sun.k*(1-ss0_trans.ecc**2)).to(u.km**2 / u.s))
print("a=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).a) 
print("e=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).ecc)
print("i=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).inc.to(u.deg))
print("RA=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).raan.to(u.deg))
print("AOP=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).argp.to(u.deg))
print("TA Departure=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).nu.to(u.deg))
print("TA Arrival=",change_plane(ssf_trans, Planes.EARTH_ECLIPTIC).nu.to(u.deg))
# The same as orbital mechanics textbook!
'''
from poliastro.plotting import OrbitPlotter2D
frame = OrbitPlotter2D()
'''
from poliastro.plotting.static import StaticOrbitPlotter
frame = StaticOrbitPlotter()
from poliastro.bodies import Earth, Mars
frame.plot(ss0, label=Earth)
frame.plot(ss1, label=Mars)
frame.plot_trajectory(ss0_trans.sample(50, min_anomaly=-19*u.deg, max_anomaly=200.45*u.deg), 
                      label="Mars Global Surveyor")
