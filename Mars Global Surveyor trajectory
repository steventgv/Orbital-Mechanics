#Adapting from Poliastro documentation "Going to Mars with Python using poliastro" to 
#confirm the results of "Interplanetary trajectory" program
import numpy as np
import astropy.units as u
from astropy import time
from poliastro import iod
from poliastro.bodies import Sun
from poliastro.twobody import Orbit
from poliastro.twobody.propagation import propagate
from poliastro.util import time_range

from astropy.coordinates import solar_system_ephemeris, get_body_barycentric_posvel
solar_system_ephemeris.set("jpl")

# Initial data
N = 50
date_launch = time.Time("1996-11-07 00:00", scale="utc")
date_arrival = time.Time("1997-09-12 00:00", scale="utc")
tof = date_arrival - date_launch

times_vector = time_range(date_launch, end=date_arrival, periods=N)
rr_earth, vv_earth = get_body_barycentric_posvel("earth", times_vector)
rr_mars, vv_mars = get_body_barycentric_posvel("mars", times_vector)
# Compute the transfer orbit!
r0 = rr_earth[0].xyz
rf = rr_mars[-1].xyz

(va, vb), = iod.lambert(Sun.k, r0, rf, tof)

ss0_trans = Orbit.from_vectors(Sun, r0, va, date_launch)
ssf_trans = Orbit.from_vectors(Sun, rf, vb, date_arrival)
from plotly.offline import init_notebook_mode
init_notebook_mode(connected=True)

from poliastro.plotting import OrbitPlotter3D
from poliastro.bodies import Earth, Mars

from plotly.graph_objs import FigureWidget
# I like color
color_earth0 = "#3d4cd5"
color_earthf = "#525fd5"
color_mars0 = "#ec3941"
color_marsf = "#ec1f28"
color_sun = "#ffcc00"
color_orbit = "#888888"
color_trans = "#999999"

fig = FigureWidget()

frame = OrbitPlotter3D(figure=fig,dark=True)

frame.set_attractor(Sun)

frame.plot_trajectory(rr_earth, label=Earth, color=color_earth0)
frame.plot_trajectory(rr_mars, label=Mars, color=color_marsf)

frame.plot_trajectory(
    propagate(ss0_trans, time.TimeDelta(times_vector - ss0_trans.epoch)),
    label="Mars Global Surveyor trajectory",
    color=color_trans,
)

frame.set_view(30 * u.deg, 260 * u.deg, distance=3 * u.km)
def change_plane(ss_orig, plane):
    """Changes the plane of the Orbit."""
    ss_orig_rv = ss_orig.frame.realize_frame(ss_orig.represent_as(CartesianRepresentation))

    dest_frame = get_frame(ss_orig.attractor, plane, obstime=ss_orig.epoch)
    ss_dest_rv = ss_orig_rv.transform_to(dest_frame)
    ss_dest_rv.representation_type = CartesianRepresentation
    ss_dest = Orbit.from_coords(ss_orig.attractor, ss_dest_rv, plane=plane)
    return ss_dest
fig.layout.title = "Mars Global Surveyor: from Earth to Mars"
print("h=",np.sqrt(ss0_trans.a*Sun.k*(1-ss0_trans.ecc**2)).to(u.km**2 / u.s))
print("a=",ss0_trans.a)
print("e=",ss0_trans.ecc)
print("i=",ss0_trans.inc.to(u.deg))
print("RA=",ss0_trans.raan.to(u.deg))
print("APO=",ss0_trans.argp.to(u.deg))
print("TA Departure=",ss0_trans.nu.to(u.deg))
print("TA Arrival=",ssf_trans.nu.to(u.deg),"\n")
print("Change to Earth eliptic\n")
print("h=",np.sqrt(ss0_trans.a*Sun.k*(1-ss0_trans.ecc**2)).to(u.km**2 / u.s))
print("a=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).a) 
print("e=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).ecc)
print("i=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).inc.to(u.deg))
print("RA=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).raan.to(u.deg))
print("AOP=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).argp.to(u.deg))
print("TA Departure=",change_plane(ss0_trans, Planes.EARTH_ECLIPTIC).nu.to(u.deg))
print("TA Arrival=",change_plane(ssf_trans, Planes.EARTH_ECLIPTIC).nu.to(u.deg))
# The same as orbital mechanics textbook!

fig
